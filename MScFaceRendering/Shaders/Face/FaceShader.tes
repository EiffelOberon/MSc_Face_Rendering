#version 400

#define DISPLACEMENT_MAP 1
#define OUTPUT_CP 3 
#define WINDING_ORDER ccw
#define SPACING equal_spacing
#define NORMAL_MAP 0
#define SHADOW 1

layout(triangles, equal_spacing, ccw) in;     
// For now just triangles are supported                                                  
#if OUTPUT_CP == 3                                                                                   
layout(triangles, SPACING, WINDING_ORDER) in;                                                       
#endif                                


uniform mat4 vMatrix;
uniform mat4 pMatrix;

#if DISPLACEMENT_MAP == 1
uniform sampler2D displacementMap;                                                             
uniform float displacementFactor;   
uniform float zeroPoint;                                                                   
#endif                         

// input from TCS
in vec3 worldSpacePosition_ES[];                                                                       
in vec2 vTextureCoordinate_ES[];      

#if NORMAL_MAP == 1                                                                 
in vec3 n_ES[];     
in vec3 t_ES[];
in vec3 b_ES[];  
// Output to Fragment Shader
out vec3 n;     
out vec3 t;
out vec3 b;                                                             

#else
in vec3 vVertexNormal_ES[];
out vec3 vVertexNormal;
#endif

#if SHADOW == 1
in vec4 shadowCoordinates_ES[];	
out vec4 shadowCoordinates;	
#endif

in vec3 V_ES[];
// Output to fragment shader
out vec3 V;
out vec3 worldSpacePosition;                                                                        
out vec2 vTextureCoordinate;   

// Interpolation functions
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2){                                                                                               
    return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2){                                                                                               
    return vec3(gl_TessCoord.x) * v0 + vec3(gl_TessCoord.y) * v1 + vec3(gl_TessCoord.z) * v2;   
}   

vec4 interpolate4D(vec4 v0, vec4 v1, vec4 v2){                                                                                               
    return vec4(gl_TessCoord.x) * v0 + vec4(gl_TessCoord.y) * v1 + vec4(gl_TessCoord.z) * v2;   
}                                                                                               
                                                                                                
void main(){

/* All the output values are obtained interpolating the inputs from TCS */ 

    vTextureCoordinate = interpolate2D(vTextureCoordinate_ES[0], vTextureCoordinate_ES[1], vTextureCoordinate_ES[2]);    
    
    #if NORMAL_MAP == 1
    n = interpolate3D(n_ES[0], n_ES[1], n_ES[2]);       
    t = interpolate3D(t_ES[0], t_ES[1], t_ES[2]);            
    b = interpolate3D(b_ES[0], b_ES[1], b_ES[2]); 
    vec3 vVertexNormal = normalize(n);     // To be used for displacement          
    #else           
    vVertexNormal = interpolate3D(vVertexNormal_ES[0], vVertexNormal_ES[1],vVertexNormal_ES[2]);
    #endif                                

    worldSpacePosition = interpolate3D(worldSpacePosition_ES[0], worldSpacePosition_ES[1], worldSpacePosition_ES[2]);    
   
    #if SHADOW == 1
    shadowCoordinates = interpolate4D(shadowCoordinates_ES[0], shadowCoordinates_ES[1], shadowCoordinates_ES[2]);
    #endif

    // Displace the vertex along the normal      
    #if DISPLACEMENT_MAP == 1                                               
    float Displacement = texture(displacementMap, vTextureCoordinate.xy).x - zeroPoint;                        
    worldSpacePosition += (vVertexNormal * Displacement) * displacementFactor;                                
	#endif
    
    V = interpolate3D(V_ES[0],V_ES[1],V_ES[2]);

    // Output position
    gl_Position = pMatrix * vMatrix * vec4(worldSpacePosition, 1.0);      
}                   